tOme1<-tOmega(Xc,Y,Ome1);
## Results
as.matrix(Ome1[1:10,1:10])
as.matrix(tOme1[1:10,1:10])
nnz(Ome1)
#!/usr/local/bin/Rscript
rm(list = ls())
library('relaxo')
set.seed(123)
install.packages("~/OneDrive/PIE_1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(PIE)
p=100
n=200;
Omega=matrix(0,nrow=p,ncol=p);
Omega[6,6]=1
Omega[1,6]=2;Omega[6,10]=2;Omega=(Omega+t(Omega))/2;
beta<-rep(0,p);beta[c(1,6,10)]=1;
X=matrix(rnorm(n*p),nrow =n);
Y=diag(X%*%Omega%*%t(X))+X%*%beta+rnorm(n);
##Centering
Xc<-scale(X,center =TRUE,scale =FALSE)
## PIE basd on the response
system.time(Ome1<-PIE(Xc,Y));
tOme1<-tOmega(Xc,Y,Ome1);
## Results
as.matrix(Ome1[1:10,1:10])
as.matrix(tOme1[1:10,1:10])
nnz(Ome1)
remove.packages(PIE)
remove.packages("PIE", lib="~/Library/R/3.4/library")
install.packages("~/OneDrive/PIE_1.1.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("~/OneDrive/PIE_1.1.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("~/OneDrive/PIE_1.1.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("~/OneDrive/PIE_1.1.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library('PIE')
#!/usr/local/bin/Rscript
rm(list = ls())
library('PIE')
library('relaxo')
set.seed(99)
p=100
n=200;
Omega=matrix(0,nrow=p,ncol=p);
Omega[6,6]=1
Omega[1,6]=2;Omega[6,10]=2;Omega=(Omega+t(Omega))/2;
beta<-rep(0,p);beta[c(1,6,10)]=1;
X=matrix(rnorm(n*p),nrow =n);
Y=diag(X%*%Omega%*%t(X))+X%*%beta+rnorm(n);
##Centering
Xc<-scale(X,center =TRUE,scale =FALSE)
## PIE basd on the response
system.time(Ome1<-PIE(Xc,Y,K=7,nlambda =80));
##PIE basd on the redisual
hbeta<-as.vector(cvrelaxo(Xc, Y,warn =FALSE)$beta);
system.time(Ome2<-PIE(Xc,Y-X%*%hbeta));
##Two Step to remove the bias
tOme1<-tOmega(Xc,Y,Ome1);
tOme2<-tOmega(Xc,Y-X%*%hbeta,Ome2);
## Results
as.matrix(Ome1[1:10,1:10])
as.matrix(Ome2[1:10,1:10])
as.matrix(tOme1[1:10,1:10])
as.matrix(tOme2[1:10,1:10])
suppressMessages(library('MASS',quietly = TRUE))
suppressMessages(library('PIE',quietly = TRUE))
install.packages("~/Dropbox/PIE_1.2.tgz", repos = NULL, type = .Platform$pkgType, lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
suppressMessages(library('doSNOW',quietly = TRUE))
suppressMessages(library('doRNG',quietly = TRUE))
suppressMessages(library('MASS',quietly = TRUE))
suppressMessages(library('PIE',quietly = TRUE))
suppressMessages(library('relaxo',quietly = TRUE))
suppressMessages(library('Matrix',quietly = TRUE))
suppressMessages(library('RAMP',quietly = TRUE))
suppressMessages(library('ncvreg',quietly = TRUE))
suppressMessages(library('glmnet',quietly = TRUE))
#Calculate the support cover percentage
cover<-function(A,B){
A=(A!=0);
B=(B!=0);
return(100*sum(tril(A*B))/sum(tril(A)));
}
suppressMessages(library('PIE',quietly = TRUE))
?PIE
detach('PIE')
remove.packages('PIE')
install.packages("~/Dropbox/PIE_1.2.tgz", repos = NULL, type = .Platform$pkgType, lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
suppressMessages(library('PIE',quietly = TRUE))
install.packages("~/Dropbox/PIE_1.2.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
suppressMessages(library('PIE',quietly = TRUE))
?PIE
remove.packages('PIE')
library('glmnet')
?glmnet
library('RAMP')
?RAMP
x<-1:100
plot(x,type='o')
p=100
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
p=100
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
for (i in 1:p)
for (j in 1:p)
{if (abs(i-j)==p/4) Omega[i,j]=0.9}
la=eigen(Omega)$values
la
p=100
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
for (i in 1:p)
for (j in 1:p)
{if (abs(i-j)==p/4) Omega[i,j]=0.09}
la=eigen(Omega)$values
la
p=200
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
for (i in 1:p)
for (j in 1:p)
{if (abs(i-j)==p/4) Omega[i,j]=0.9}
la=eigen(Omega)$values
la
p=200
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
for (i in 1:p)
for (j in 1:p)
{if (abs(i-j)==p/4) Omega[i,j]=0.09}
la=eigen(Omega)$values
la
p=500
##Model 2
Omega<-toeplitz(0.5^(1:p-1))
for (i in 1:p)
for (j in 1:p)
{if (abs(i-j)==p/4) Omega[i,j]=0.09}
la=eigen(Omega)$values
la
q=1+0.04/12
126000*(q-1)/(q^12-1)
q=1+0.05/12
126000*(q-1)/(q^12-1)
q=1+0.04/12
126000*(q-1)/(q^12-1)
q=1+0.1/12
126000*(q-1)/(q^12-1)
1.76*1.76*33
install.packages(c("digest", "foreign", "Rcpp", "RcppArmadillo", "survival"))
p=4.79/100/12;
90000*p
p=4.79/100/12;
90000*p/30*31
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,12);
an[1]=m/12;
for (k in 1:12) {
an[k]=(an[k-1]-90000*4/79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,12);
an[1]=m/12;
for (k in 2:12) {
an[k]=(an[k-1]-90000*4/79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,12);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4/79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,11);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4/79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,11);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,11);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,11);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m/12;
}
an
90000*4.79/100/12
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7800;
an<-rep(0,11);
an[1]=m/12;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m/12;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7800;
an<-rep(0,11);
an[1]=m;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=8000;
an<-rep(0,11);
an[1]=m;
for (k in 2:11) {
an[k]=(an[k-1]-90000*4.79/100/12)*(1+p)+m;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=8000;
an<-rep(0,11);
an[1]=m;
for (k in 2:11) {
an[k]=(an[k-1])*(1+p)+m-90000*4.79/100/12;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7500+90000*4.79/100/12;
an<-rep(0,11);
an[1]=m;
for (k in 2:11) {
an[k]=(an[k-1])*(1+p)+m-90000*4.79/100/12;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7500+90000*4.79/100/12;
an<-rep(0,12);
an[1]=m;
for (k in 2:11) {
an[k]=(an[k-1])*(1+p)+m-90000*4.79/100/12;
}
an
p=4.79/100/12;
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7500+90000*4.79/100/12;
an<-rep(0,12);
an[1]=m;
for (k in 2:12) {
an[k]=(an[k-1])*(1+p)+m-90000*4.79/100/12;
}
an
##投资收益
p=0.1/12
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=7500;
an<-rep(0,12);
an[1]=m;
for (k in 2:12) {
an[k]=(an[k-1])*(1+p)+m-90000*4.79/100/12;
}
an
##投资收益
p=0.1/12
#中国银行贷款利率4.79%，每月还利息，到期还本；
m=90000;
an<-rep(0,12);
an[1]=m;
for (k in 2:12) {
an[k]=(an[k-1])*(1+p)-m*4.79/100/12;
}
an
`m1-200` <- readRDS("~/Dropbox/Share/Cheng&Yan/matinv/fsim/m1-200.rds")
A <- readRDS("~/Dropbox/Share/Cheng&Yan/matinv/fsim/m1-200.rds")
A
as.matrix(A)
as.numeric(A)
install.packages("~/Dropbox/EQUAL_1.0.tar.gz", repos = NULL, type = "source")
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=200
p=100
Omega<-solve(toeplitz(0.5^(1:p-1)))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
?EQUAL
?CVEQUAL
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=200
p=100
Omega<-toeplitz(0.5^(1:p-1))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
obj1$Omega[1:10,1:10]
obj2$Omega[1:10,1:10]
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=400
p=100
Omega<-toeplitz(0.5^(1:p-1))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
obj1$Omega[1:10,1:10]
obj2$Omega[1:10,1:10]
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=400
p=100
Omega<-toeplitz(0.5^(1:p-1))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
obj1$Omega[1:10,1:10]
obj2$Omega[1:10,1:10]
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=200
p=100
Omega<-toeplitz(0.5^(1:p-1))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
obj1$Omega[1:10,1:10]
obj2$Omega[1:10,1:10]
install.packages("~/OneDrive/EQUAL_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/OneDrive/EQUAL_1.0.tar.gz", repos = NULL, type = "source")
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('EQUAL')
n=200
p=100
Omega<-toeplitz(0.5^(1:p-1))
X=mvrnorm(n,rep(0,p),solve(Omega))
aa<-EQUAL(X)
bb<-EQUAL(X,type=FALSE);
obj1<-CVEQUAL(X);
obj2<-CVEQUAL(X,type=FALSE)
obj1$Omega[1:10,1:10]
obj2$Omega[1:10,1:10]
set.seed(123)
pn<-function(n){
mean(rbern(n, prob = 0.5))}
N<-(1:100)*100;
f1<-sapply(N, pn)
plot(N,f1)
?rbinom
set.seed(123)
pn<-function(n){
mean(rbinom(n, 1, 0.5))}
N<-(1:100)*100;
f1<-sapply(N, pn)
plot(N,f1)
set.seed(123)
pn<-function(n){
mean(rbinom(n, 1, 0.5))}
N<-(1:100)*500;
f1<-sapply(N, pn)
plot(N,f1)
set.seed(123)
pn<-function(n){
mean(rbinom(n, 1, 0.5))}
N<-(1:100)*500;
f1<-sapply(N, pn)
plot(N,f1,col='red')
plot(N,f1,col='red',xlab ='n',ylab='p_n')
N<-(1:100)*500;
f1<-sapply(N, pn)
plot(N,f1,col='blue',xlab ='n',ylab='p_n')
pn<-function(n){
mean(rbinom(n, 1, 0.5))}
N<-(1:100)*500;
f1<-sapply(N, pn)
plot(N,f1,col='blue',xlab ='n',ylab='p_n')
pnorm(0)
pnorm(2)-pnorm(-2)
install.packages(' ACSWR')
data(nerve)
data(Nerve)
install.packages(ACSWR)
install.packages('ACSWR')
library(ACSWR)
data(nerve)
nerve_ecdf <- ecdf(nerve)
knots(nerve_ecdf) # Returns the jump points of the edf
summary(nerve_ecdf) # the usual R summaries
nerve_ecdf(nerve) # returns the percentiles at the data points
library(ACSWR)
data(nerve)
summary(nerve)
plot(ecdf(nerve))
n=799
alpha=0.05
epsilon_n=sqrt{log(2/alpha)/2n}
epsilon_n=sqrt(log(2/alpha)/2n)
epsilon_n=sqrt(log(2/alpha)/2/n)
plot(max(ecdf(nerve)-epsilon_n,0))
plot(ecdf(nerve)-epsilon_n)
?ecdf
rm(list = ls())
set.seed(1985)
setwd('~/Dropbox/Share/Cheng&Yan/matinv/Simulation/')
library('Rcpp')
library('glasso')
library('Matrix')
library('EQUAL')
library('igraph')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
leukemia_small <- read.csv("http://web.stanford.edu/~hastie/CASI_files/DATA/leukemia_small.csv")
id<-'ALL'
for (k in 1:46)
{id<-c(id,paste('ALL.',k,sep=''))}
X<-t(leukemia_small[,id]);
dim(X)
n=nrow(X);
p=ncol(X);
X<-scale(X,center =TRUE,scale =TRUE)
nlambda=100
Sn<-cov(X);
An<-abs(Sn-diag(diag(Sn)));
lambda=exp(seq(log(0.5),0,length.out =nlambda))*max(An)
obj1<-readRDS('ALL.RDS')
Re<-rep(0,nlambda)
for ( k in 1:nlambda)
{
Re[k]=nnzero(obj1$Omega[[k]])/p;
}
pdf("fig/fig5.pdf")
plot(obj1$lambda,Re,type='o',xlab ='lambda',ylab='Sparsity level')
dev.off()
A<-as.matrix(obj1$Omega[[63]])
obj1$lambda[[63]]
nnzero(A)
lab1<-apply(A, 1, nnzero)
aa<-sort(lab1,decreasing =TRUE)[round(p*0.02)]
id1<-(lab1>=aa)
A=A[id1,id1]
dim(A)
g1<- graph_from_adjacency_matrix(A!=0,mode='undirected',diag=FALSE)
layout.grid = layout.fruchterman.reingold(g1)
pdf("fig/fig6.pdf")
plot(g1, edge.color='gray50',vertex.color="gray50", vertex.size=2, vertex.label=NA,layout=layout.circle)
dev.off()
